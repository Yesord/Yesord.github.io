{"title":"Cmake基础语法","uid":"7306721a27e9ec7e2372287f94d883c8","slug":"Cmake基础语法","date":"2023-10-17T11:57:43.000Z","updated":"2023-10-17T12:06:07.829Z","comments":true,"path":"api/articles/Cmake基础语法.json","keywords":null,"cover":null,"content":"<h1 id=\"Cmake基础语法\"><a href=\"#Cmake基础语法\" class=\"headerlink\" title=\"Cmake基础语法\"></a>Cmake基础语法</h1><div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 设置cmake最低版本</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">cmake_minimum_required(VERSION</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3.2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># project命令用于指定cmake工程的名称，实际上，它还可以指定cmake工程的版本号（VERSION关键字）、简短的描述（DESCRIPTION关键字）、主页URL（HOMEPAGE_URL关键字）和编译工程使用的语言（LANGUAGES关键字）</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># project(&lt;PROJECT-NAME&gt; [&lt;language-name&gt;...])</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># project(&lt;PROJECT-NAME&gt; [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]] [DESCRIPTION &lt;project-description-string&gt;][HOMEPAGE_URL &lt;url-string&gt;] [LANGUAGES &lt;language-name&gt;...])</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># $&#123;PROJECT_SOURCE_DIR&#125; 和 &lt;PROJECT-NAME&gt;_SOURCE_DIR：本CMakeLists.txt所在的文件夹路径</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># $&#123;PROJECT_NAME&#125;：本CMakeLists.txt的project名称</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">project(xxx</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">project(mytest</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">VERSION</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1.2</span><span style=\"color: #C3E88D\">.3.4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">project</span><span style=\"color: #BABED8\"> (mytest </span><span style=\"color: #C3E88D\">HOMEPAGE_URL</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">“https://www.XXX</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">示例</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #C3E88D\">.com”</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 获取路径下所有的.cpp/.c/.cc文件（不包括子目录），并赋值给变量中</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">aux_source_directory(路径</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">变量</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># GLOB_RECURSE 获取目录下的所有cpp文件（不包括子目录），并赋值给SOURCES</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">file(</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #FFCB6B\">GLOB</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">SOURCES</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">PROJECT_SOURCE_DIR</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #FFCB6B\">/*.c</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># GLOB_RECURSE 获取目录下的所有cpp文件（包括子目录），并赋值给NATIVE_SRC</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">file(</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #FFCB6B\">GLOB_RECURSE</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">NATIVE_SRC</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">PROJECT_SOURCE_DIR</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #FFCB6B\">/lib/*.cpp</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 给文件名/路径名或其他字符串起别名，用$&#123;变量&#125;获取变量内容</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">set</span><span style=\"color: #BABED8\">(变量 </span><span style=\"color: #C3E88D\">文件名/路径/...</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 添加编译选项FOO BAR</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># add_definitions定义宏，但是这种定义方式无法给宏具体值 等价C语言中的#define  MG_ENABLE_OPENSSL</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_definitions(-DFOO</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-DBAR</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">...</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># add_compile_definitions定义宏，这种方式可以给宏具体值，但是这个指令只要高版本的cmake支持 等价C语言中 #define  MG_ENABLE_OPENSSL   1 </span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_compile_definitions(MG_ENABLE_OPENSSL</span><span style=\"color: #BABED8\">=1)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 打印消息</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">message(消息</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 编译子文件夹的CMakeLists.txt</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_subdirectory(子文件夹名称</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 将.cpp/.c/.cc文件生成.a静态库</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 注意，库文件名称通常为libxxx.so，在这里只要写xxx即可</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_library(库文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">STATIC</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">文件</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 将.cpp/.c/.cc文件生成可执行文件</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_executable(可执行文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">文件</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 规定.h头文件路径</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">include_directories(路径</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 规定.so/.a库文件路径</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">link_directories(路径</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 设置编译选项及默认值</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">option(TEST_DEBUG</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">option for debug</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">OFF</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 对add_library或add_executable生成的文件进行链接操作</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 注意，库文件名称通常为libxxx.so，在这里只要写xxx即可</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">target_link_libraries(库文件名称/可执行文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">链接的库文件名称</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\"> </span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">基础配置流程</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">project(xxx</span><span style=\"color: #BABED8\">)                                          </span><span style=\"color: #676E95; font-style: italic\">#必须</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_subdirectory(子文件夹名称</span><span style=\"color: #BABED8\">)                         </span><span style=\"color: #676E95; font-style: italic\">#父目录必须，子目录不必</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_library(库文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">STATIC</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">文件</span><span style=\"color: #BABED8\">)                    </span><span style=\"color: #676E95; font-style: italic\">#通常子目录(二选一)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add_executable(可执行文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">文件</span><span style=\"color: #BABED8\">)                     </span><span style=\"color: #676E95; font-style: italic\">#通常父目录(二选一)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">include_directories(路径</span><span style=\"color: #BABED8\">)                              </span><span style=\"color: #676E95; font-style: italic\">#必须</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">link_directories(路径</span><span style=\"color: #BABED8\">)                                 </span><span style=\"color: #676E95; font-style: italic\">#必须</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">target_link_libraries(库文件名称/可执行文件名称</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">链接的库文件名称</span><span style=\"color: #BABED8\">)       </span><span style=\"color: #676E95; font-style: italic\">#必须</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span></span></code></pre></div>","feature":true,"text":"Cmake基础语法bash# 设置cmake最低版本 cmake_minimum_required(VERSION 3.2) # project命令用于指定cm...","permalink":"/post/Cmake基础语法","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Linux | Cmake","slug":"Linux-Cmake","count":1,"path":"api/tags/Linux-Cmake.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Cmake%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">Cmake基础语法</span></a></li></ol>","author":{"name":"PIKO","slug":"blog-author","avatar":"https://s2.loli.net/2023/10/17/4GK2m3UkXztog9D.jpg","link":"/","description":"猫军阀军校的一个二年级学牲。","socials":{"github":"https://github.com/Yesord","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/aoliba_believer","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"FreeRTOS的移植","uid":"92468dc8f04e07f9e105708cbbdde9c2","slug":"FreeRTOS的移植","date":"2023-10-17T09:33:25.000Z","updated":"2023-10-17T12:49:01.568Z","comments":true,"path":"api/articles/FreeRTOS的移植.json","keywords":null,"cover":"https://s2.loli.net/2023/10/17/yiOnw8gu2q7Hjlc.png","text":"FreeRTOS的移植介绍下FreeRTOS源码内容 名称 描述 FreeRTOS FreeRTOS内核 FreeRTOS-Plus FreeRTOS组件 to...","permalink":"/post/FreeRTOS的移植","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"RTOS","slug":"RTOS","count":1,"path":"api/tags/RTOS.json"},{"name":"STM32","slug":"STM32","count":1,"path":"api/tags/STM32.json"}],"author":{"name":"PIKO","slug":"blog-author","avatar":"https://s2.loli.net/2023/10/17/4GK2m3UkXztog9D.jpg","link":"/","description":"猫军阀军校的一个二年级学牲。","socials":{"github":"https://github.com/Yesord","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/aoliba_believer","juejin":"","customs":{}}},"feature":true}}